---
import Layout from '@layouts/Layout.astro';
import Header from '@components/Header.astro';
import Footer from '@components/Footer.astro';
import Tag from '@components/Tag.astro';
import Datetime from '@components/Datetime';
import BackToTopButton from "@components/BackToTopButton.astro";
import type { CollectionEntry } from 'astro:content';
import { slugifyStr } from '@utils/slugify';
import ShareLinks from '@components/ShareLinks.astro';
import { SITE } from '@config';
import IconCopy from '@assets/icons/IconCopy.svg?raw';
import IconCheck from '@assets/icons/IconCheck.svg?raw';

export interface Props {
  post: CollectionEntry<'blog'>;
  posts: CollectionEntry<'blog'>[];
}

const { post, posts } = Astro.props;

const {
  title,
  author,
  description,
  ogImage,
  canonicalURL,
  pubDatetime,
  modDatetime,
  tags,
  readingTime
} = post.data;

const { Content } = await post.render();

const ogImageUrl = typeof ogImage === 'string' ? ogImage : ogImage?.src;
const ogUrl = new URL(
  ogImageUrl ?? `/blog/${slugifyStr(title)}.png`,
  Astro.url.origin
).href;

const layoutProps = {
  title: `${title} | ${SITE.title}`,
  author,
  description,
  pubDatetime,
  modDatetime,
  canonicalURL,
  ogImage: ogUrl,
  scrollSmooth: true
};

/* ========== Prev/Next Posts ========== */
const allPosts = posts.map(({ data: { title }, slug }) => ({
  slug,
  title
}));
const currentPostIndex = allPosts.findIndex(a => a.slug === post.slug);
const prevPost = currentPostIndex !== 0 ? allPosts[currentPostIndex - 1] : null;
const nextPost =
  currentPostIndex !== allPosts.length ? allPosts[currentPostIndex + 1] : null;
---

<Layout {...layoutProps}>
  <Header />

  <!-- <div class="progress-container fixed top-0 z-10 h-1 w-full bg-skin-fill">
    <div class="progress-bar h-1 w-0 bg-skin-accent" id="myBar"></div>
  </div> -->

  <div class="mx-auto flex w-full max-w-3xl justify-start px-2">
    <button
      class="focus-outline mb-2 mt-8 flex hover:opacity-75"
      onclick="(() => (history.length === 1) ? window.location = '/' : history.back())()"
    >
      <svg xmlns="http://www.w3.org/2000/svg"
        ><path
          d="M13.293 6.293 7.586 12l5.707 5.707 1.414-1.414L10.414 12l4.293-4.293z"
        ></path>
      </svg><span>Go back</span>
    </button>
  </div>
  <main id="main-content">
    <h1 transition:name={slugifyStr(title)} class="post-title">{title}</h1>
    <div class="flex items-center gap-2">
      <Datetime
        pubDatetime={pubDatetime}
        modDatetime={modDatetime}
        size="sm"
        className="my-2"
      />
      <span aria-hidden="true" class="text-skin-base opacity-80"> • </span>
      <p class="text-sm text-skin-base opacity-80">{readingTime}</p>
      <span aria-hidden="true" class="text-skin-base opacity-80"> • </span>
      <div class="text-sm text-skin-base opacity-80">
        <ul>
          {tags.map(tag => <Tag tag={slugifyStr(tag)} />)}
        </ul>
      </div>
    </div>
    <article id="article" role="article" class="prose mx-auto mt-8 max-w-3xl">
      <Content />
    </article>

    <div
      class="flex flex-col-reverse items-center justify-between gap-6 sm:flex-row-reverse sm:items-end sm:gap-4"
    >
      <!-- <button
        id="back-to-top"
        class="focus-outline whitespace-nowrap py-1 hover:opacity-75"
      >
        <svg xmlns="http://www.w3.org/2000/svg" class="rotate-90">
          <path
            d="M13.293 6.293 7.586 12l5.707 5.707 1.414-1.414L10.414 12l4.293-4.293z"
          ></path>
        </svg>
        <span class="text-skin-accent text-opacity-80">Back to Top</span>
      </button> -->
      <BackToTopButton />
      <iframe src="https://github.com/sponsors/amandeepmittal/button" title="Buy me coffee" height="32" width="114" style="border: 0; border-radius: 6px;"></iframe>
      <ShareLinks />
    </div>
    <hr class="my-6 border-dashed" />
    <!-- Previous/Next Post Buttons -->
    <div class="grid grid-cols-1 gap-6 sm:grid-cols-2">
      {
        prevPost && (
          <a
            href={`/blog/${prevPost.slug}`}
            class="flex w-full gap-1 hover:opacity-75"
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              width="24"
              height="24"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              stroke-width="2"
              stroke-linecap="round"
              stroke-linejoin="round"
              class="icon icon-tabler icons-tabler-outline icon-tabler-chevron-left flex-none"
            >
              <path stroke="none" d="M0 0h24v24H0z" fill="none" />
              <path d="M15 6l-6 6l6 6" />
            </svg>
            <div>
              <span>Previous Post</span>
              <div class="text-sm text-skin-accent/85">{prevPost.title}</div>
            </div>
          </a>
        )
      }
      {
        nextPost && (
          <a
            href={`/blog/${nextPost.slug}`}
            class="flex w-full justify-end gap-1 text-right hover:opacity-75 sm:col-start-2"
          >
            <div>
              <span>Next Post</span>
              <div class="text-sm text-skin-accent/85">{nextPost.title}</div>
            </div>
            <svg
              xmlns="http://www.w3.org/2000/svg"
              width="24"
              height="24"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              stroke-width="2"
              stroke-linecap="round"
              stroke-linejoin="round"
              class="icon icon-tabler icons-tabler-outline icon-tabler-chevron-right flex-none"
            >
              <path stroke="none" d="M0 0h24v24H0z" fill="none" />
              <path d="M9 6l6 6l-6 6" />
            </svg>
          </a>
        )
      }
    </div>
    <hr class="my-6 border-dashed" />
    <section
      class="mt-4 flex items-center rounded-md border border-purple-500 p-2"
    >
      <div class="flex w-full justify-start">
        <section class="flex w-full flex-col space-y-2 pt-2">
          <div class="flex items-center justify-between">
            <div class="text-md font-semibold text-skin-base opacity-80">
              <a href="/about" class="hover:underline">Aman Mittal</a>
              <span class="text-sm italic text-[#8A55F7]">author</span>
            </div>
            <!-- <div class="flex space-x-2"> -->
              <!-- <a
                href="https://github.com/sponsors/amandeepmittal?frequency=one-time"
                target="_blank"
                class="text-xs font-bold text-[#8A55F7] hover:underline"
              >
                Buy me coffee
              </a> -->
              <!-- <a
                href="https://github.com/amandeepmittal"
                target="_blank"
                class="text-xs font-bold text-purple-500 hover:underline"
              >
                GitHub
              </a>
              <a
                href="https://x.com/amanhimself"
                target="_blank"
                class="text-xs font-bold text-purple-500 hover:underline"
              >
                X
              </a> -->
            <!-- </div> -->
          </div>
          <p class="text-sm text-skin-base opacity-80">
            I'm a software developer and technical writer. On this blog, I share
            my learnings about both fields. Recently, I have begun exploring
            other topics, so don't be surprised if you find something new here.
          </p>
          <p
            class="flex items-center space-x-2 text-sm text-skin-base opacity-80"
          >
            Currently, working as a documentation lead at Expo.
          </p>
        </section>
      </div>
    </section>
    <Footer />

    <style>
      main {
        @apply mx-auto w-full max-w-3xl px-4 pb-12;
      }
      .post-title {
        @apply text-2xl font-semibold text-skin-accent;
      }
    </style>

    <script is:inline define:vars={{ IconCopy, IconCheck }}>
      function createProgressBar() {
        const progressContainer = document.createElement('div');
        progressContainer.className =
          'progress-container fixed top-0 z-10 h-1 w-full bg-skin-fill';
        const progressBar = document.createElement('div');
        progressBar.className = 'progress-bar h-1 w-0 bg-skin-accent';
        progressBar.id = 'myBar';
        progressContainer.appendChild(progressBar);
        document.body.appendChild(progressContainer);
      }
      createProgressBar();

      function updateScrollProgress() {
        const winScroll =
          document.body.scrollTop || document.documentElement.scrollTop;
        const height =
          document.documentElement.scrollHeight -
          document.documentElement.clientHeight;
        const scrolled = (winScroll / height) * 100;
        if (document) {
          const myBar = document.getElementById('myBar');
          if (myBar) {
            myBar.style.width = scrolled + '%';
          }
        }
      }
      document.addEventListener('scroll', updateScrollProgress);

      function addHeadingLinks() {
        let headings = Array.from(
          document.querySelectorAll('h2, h3, h4, h5, h6')
        );
        for (let heading of headings) {
          heading.classList.add('group');
          let link = document.createElement('a');
          link.innerText = '#';
          link.className = 'heading-link hidden group-hover:inline-block ml-2';
          link.href = '#' + heading.id;
          link.ariaHidden = 'true';
          heading.appendChild(link);
        }
      }
      addHeadingLinks();

      function attachCopyButtons() {
        let codeBlocks = Array.from(document.querySelectorAll('pre'));

        for (let codeBlock of codeBlocks) {
          const codeElement = codeBlock.querySelector('code');
          if (!codeElement) continue;

          const codeText = codeElement.textContent || '';
          const lines = codeText.split('\n');
          let filename = null;
          let filenameLineIndex = -1;

          for (let i = 0; i < Math.min(3, lines.length); i++) {
            const line = lines[i].trim();

            const patterns = [
              /^\/\/\s*(.+\.\w+)/,  // // filename.js
              /^\/\*\s*(.+\.\w+)\s*\*\//,  // /* filename.css */
              /^#\s*(.+\.\w+)/,     // # filename.py
              /^<!--\s*(.+\.\w+)\s*-->/,  // <!-- filename.html -->
            ];

            for (const pattern of patterns) {
              const match = line.match(pattern);
              if (match) {
                filename = match[1];
                filenameLineIndex = i;
                break;
              }
            }

            if (filename) break;
          }

          if (filename) {
            const allTextNodes = [];
            const walker = document.createTreeWalker(
              codeElement,
              NodeFilter.SHOW_TEXT,
              null,
              false
            );

            let node;
            while (node = walker.nextNode()) {
              allTextNodes.push(node);
            }

            let currentLineIndex = 0;
            let currentLineText = '';

            for (const textNode of allTextNodes) {
              const text = textNode.textContent;
              const newlineCount = (text.match(/\n/g) || []).length;

              if (currentLineIndex === filenameLineIndex) {
                let parent = textNode.parentElement;
                while (parent && parent !== codeElement) {
                  if (parent.tagName === 'SPAN') {
                    parent.style.display = 'none';
                    break;
                  }
                  parent = parent.parentElement;
                }

                if (parent === codeElement) {
                  const span = document.createElement('span');
                  span.style.display = 'none';
                  textNode.parentNode.insertBefore(span, textNode);
                  span.appendChild(textNode);
                }
              }

              currentLineIndex += newlineCount;
              if (currentLineIndex > filenameLineIndex) break;
            }


            const header = document.createElement('div');
            header.className = 'code-header flex items-center justify-between bg-skin-card border border-skin-line rounded-t-md px-3 py-2 text-sm';
            const leftSide = document.createElement('div');
            leftSide.className = 'flex items-center gap-2';
            const greenDot = document.createElement('div');
            greenDot.className = 'w-2 h-2 bg-green-500 rounded-full';
            const filenameSpan = document.createElement('span');
            filenameSpan.className = 'font-medium text-skin-base';

            filenameSpan.textContent = filename;
            leftSide.appendChild(greenDot);
            leftSide.appendChild(filenameSpan);

            const copyButton = document.createElement('button');
            copyButton.className = 'copy-code p-1 text-skin-base hover:text-skin-accent transition-all duration-200 ease-in-out hover:bg-skin-fill rounded';
            copyButton.innerHTML = IconCopy;
            copyButton.querySelector('svg').style.width = '16px';
            copyButton.querySelector('svg').style.height = '16px';
            copyButton.setAttribute('aria-label', 'Copy code to clipboard');
            copyButton.setAttribute('title', 'Copy code to clipboard');

            header.appendChild(leftSide);
            header.appendChild(copyButton);

            codeBlock.parentNode.insertBefore(header, codeBlock);

            codeBlock.className = (codeBlock.className || '') + ' rounded-t-none mt-0';
            codeBlock.style.borderTop = 'none';
            codeBlock.style.marginTop = '0';

            copyButton.addEventListener('click', async () => {
              const originalCode = lines.join('\n');
              await navigator.clipboard.writeText(originalCode);

              const originalHTML = copyButton.innerHTML;
              copyButton.innerHTML = IconCheck;
              copyButton.querySelector('svg').style.width = '16px';
              copyButton.querySelector('svg').style.height = '16px';

              setTimeout(() => {
                copyButton.innerHTML = originalHTML;
                copyButton.querySelector('svg').style.width = '16px';
                copyButton.querySelector('svg').style.height = '16px';
              }, 1200);
            });

          } else {
            let wrapper = document.createElement('div');
            wrapper.style.position = 'relative';
            wrapper.className = 'code-block-wrapper';

            let copyButton = document.createElement('button');
            copyButton.className = 'copy-code absolute top-3 right-3 p-2 text-skin-base hover:text-skin-accent transition-all duration-200 ease-in-out hover:bg-skin-card rounded-md opacity-70 hover:opacity-100';
            copyButton.innerHTML = IconCopy;
            copyButton.querySelector('svg').style.width = '16px';
            copyButton.querySelector('svg').style.height = '16px';
            copyButton.setAttribute('aria-label', 'Copy code to clipboard');
            copyButton.setAttribute('title', 'Copy code to clipboard');

            codeBlock?.parentNode?.insertBefore(wrapper, codeBlock);
            wrapper.appendChild(codeBlock);
            wrapper.appendChild(copyButton);

            copyButton.addEventListener('click', async () => {
              const code = codeBlock.querySelector('code');
              const text = code?.innerText;
              await navigator.clipboard.writeText(text ?? '');

              const originalHTML = copyButton.innerHTML;
              copyButton.innerHTML = IconCheck;
              copyButton.querySelector('svg').style.width = '16px';
              copyButton.querySelector('svg').style.height = '16px';

              setTimeout(() => {
                copyButton.innerHTML = originalHTML;
                copyButton.querySelector('svg').style.width = '16px';
                copyButton.querySelector('svg').style.height = '16px';
              }, 1200);
            });
          }
        }
      }
      attachCopyButtons();
    </script>
  </main>
</Layout>
